import logging
import json
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from telethon import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonSpam, InputReportReasonViolence, InputReportReasonPornography, InputReportReasonChildAbuse, InputReportReasonOther
from urllib.parse import urlparse

API_TOKEN = '7501860705:AAEPuThmAoVhCFnqkBPGKJ9EENi70vnbszs'
API_ID = '28234677'
API_HASH = 'e7c47bee153e7c54524d4086c650027d'
SESSION_FOLDER = 'sessions'
USERS_DB = 'users.json'
COOLDOWN_MINUTES = 5
LOG_CHAT_ID = '-1002455827700'
admin_id = '721151979'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

class ReportStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_confirmation = State()

clients = []
stop_reports = False

reasons = {
    "spam": InputReportReasonSpam(),
    "violence": InputReportReasonViolence(),
    "porn": InputReportReasonPornography(),
    "child": InputReportReasonChildAbuse(),
    "other": InputReportReasonOther()
}

def load_users():
    try:
        with open(USERS_DB, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(USERS_DB, 'w') as file:
        json.dump(users, file, indent=4)

async def check_cooldown(user_id):
    users = load_users()
    user = users.get(str(user_id), {})
    last_report_time = user.get('last_report_time')
    
    if last_report_time:
        last_report = datetime.fromisoformat(last_report_time)
        time_since_last_report = datetime.now() - last_report
        if time_since_last_report < timedelta(minutes=COOLDOWN_MINUTES):
            remaining_minutes = COOLDOWN_MINUTES - int(time_since_last_report.total_seconds() / 60)
            return False, remaining_minutes
    
    return True, 0

async def update_last_report_time(user_id):
    users = load_users()
    users[str(user_id)] = users.get(str(user_id), {})
    users[str(user_id)]['last_report_time'] = datetime.now().isoformat()
    save_users(users)

async def subscription_required(message):
    users = load_users()
    user = users.get(str(message.from_user.id), {})
    if not user.get('subscription'):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return False
    return True

async def analyze_account(user_id, message_text):
    return 75  

async def send_log(log_message):
    print(f"Log: {log_message}")

async def load_clients():
    global clients
    if not clients:
        for session_file in os.listdir(SESSION_FOLDER):
            if session_file.endswith('.session'):
                client = TelegramClient(os.path.join(SESSION_FOLDER, session_file), API_ID, API_HASH)
                await client.start()
                clients.append(client)
    return clients

@router.callback_query(F.data == "botnet")
async def botnet_handler(call: CallbackQuery):
    if not await subscription_required(call.message):
        return
    
    instruction_text = "–ü—Ä–æ–ø–∏—à–∏ /rp –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã. /rp {—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ} [–ø—Ä–∏—á–∏–Ω–∞]"
    await call.message.edit_text(instruction_text)
    await ReportStates.waiting_for_link.set()

@router.message(Command("rp"))
async def send_mass_reports(message: Message, state: FSMContext):
    user_id = message.from_user.id

    is_allowed, remaining_minutes = await check_cooldown(user_id)
    if not is_allowed:
        await message.reply(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –∂–∞–ª–æ–±—ã.")
        return

    if not await subscription_required(message):
        return

    command = message.text.split()
    if len(command) < 2:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/rp {—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ} [–ø—Ä–∏—á–∏–Ω–∞]`.")
        return

    message_url = command[1]
    reason = ' '.join(command[2:]) if len(command) > 2 else 'spam'

    removal_chance = await analyze_account(user_id, message.text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='confirm_report')],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_report')]
    ])

    await message.reply(
        f"üîç –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–Ω–æ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {removal_chance}%\n"
        f"–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã: {reason}\n"
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=markup
    )

    await state.update_data(message_url=message_url, reason=reason)
    await ReportStates.waiting_for_confirmation.set()

@router.callback_query(ReportStates.waiting_for_confirmation)
async def confirm_report_handler(call: CallbackQuery, state: FSMContext):
    global stop_reports
    if call.data == "confirm_report":
        stop_reports = False
        await call.message.edit_text("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å...")
        data = await state.get_data()
        await start_reporting_process(call.message, data['message_url'], data['reason'])
    elif call.data == "cancel_report":
        await call.message.edit_text("‚ùå –í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ —Å–Ω–æ—Å.")
    await state.clear()

async def start_reporting_process(message, message_url, reason):
    global stop_reports, clients

    if not clients:
        clients = await load_clients()

    parts = message_url.split('/')
    if len(parts) < 3:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
        return

    chat_username = parts[-2]
    message_id = int(parts[-1])

    total_reports = 0
    total_failed = 0

    stop_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='stop_reports')]
    ])
    progress_message = await message.reply("üöÄ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±...", reply_markup=stop_button)

    logging.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_username}")

    for client in clients:
        if stop_reports:
            logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            await progress_message.edit_text("üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            return

        success, victim_username, victim_id = await report_message(client, chat_username, message_id, reason)

        if success:
            total_reports += 1
        else:
            total_failed += 1

        await progress_message.edit_text(
            f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±...\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_reports}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {total_failed}",
            reply_markup=stop_button
        )

    await progress_message.delete()

    log_message = (
        f"üë§ –ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username} (ID: {message.from_user.id})\n"
        f"üí¨ –ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}\n"
        f"üìå –ß–∞—Ç: {chat_username}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {message_url}\n"
        f"üìä –°—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_reports}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {total_failed}"
    )
    logging.info(log_message)
    await send_log(log_message)

    await message.answer_photo(
        photo="path/to/Flopi.png",
        caption=f"üéâ –í—Å–µ –∂–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_reports}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {total_failed}"
    )

    await update_last_report_time(message.from_user.id)

@router.callback_query(F.data == "stop_reports")
async def stop_reports_handler(call: CallbackQuery):
    global stop_reports
    stop_reports = True
    await call.message.edit_text("‚è∏Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def report_message(client, chat_username, message_id, reason):
    try:
        peer = await client.get_entity(chat_username)
        message = await client.get_messages(peer, ids=message_id)

        report_reason = reasons.get(reason.lower(), InputReportReasonSpam())
        result = await client(ReportRequest(
            peer=peer,
            id=[message_id],
            reason=report_reason,
            message='–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã'
        ))

        victim_username = message.sender.username if message.sender else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        victim_id = message.sender_id if message.sender_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        return result, victim_username, victim_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã: {e}")
        return False, None, None

dp.include_router(router)

if __name__ == '__main__':
    from aiogram import executor
    if not os.path.exists(SESSION_FOLDER):
        os.makedirs(SESSION_FOLDER)
    executor.start_polling(dp, skip_updates=True)